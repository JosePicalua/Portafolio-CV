import json
import random
import os

# ðŸ“‚ Ruta del archivo JSON
nombre_archivo = "Postgres/GenerarData/json/productos.json"

# ðŸ“‚ Cargar los datos existentes si el archivo ya existe
if os.path.exists(nombre_archivo):
    with open(nombre_archivo, "r") as file:
        try:
            productos_generados = json.load(file)
        except json.JSONDecodeError:
            productos_generados = []  # Si el archivo estÃ¡ vacÃ­o o corrupto, iniciar con una lista vacÃ­a
else:
    productos_generados = []  # Si el archivo no existe, iniciar con una lista vacÃ­a

# ðŸ“‚ Cargar los proveedores desde el JSON
with open("GenerarData/json/provedores.json", "r") as file:
    proveedores = json.load(file)

# ðŸ”„ FunciÃ³n para generar un producto aleatorio
def generar_producto():
    nombres_productos = [
        "Laptop", "Mouse", "Teclado", "Monitor", "Impresora", "Auriculares", "Altavoces", "Webcam",
        "Disco Duro", "SSD", "Memoria RAM", "Tarjeta GrÃ¡fica", "Procesador", "Placa Base", "Fuente de AlimentaciÃ³n",
        "Ventilador", "RefrigeraciÃ³n LÃ­quida", "Cable HDMI", "Cable USB", "Silla Gamer", "Escritorio",
        "MicrÃ³fono", "Router", "MÃ³dem", "Smartphone", "Tablet", "CÃ¡mara de Seguridad", "Reloj Inteligente",
        "Cargador", "BaterÃ­a Externa", "Estabilizador", "Proyector", "Control Remoto", "Joystick", "Dron"
    ]
    
    price_united = round(random.uniform(10, 500), 2)  # Precio entre 10 y 500

    return {
        "id_producto": random.randint(1000, 9999),  # ID aleatorio
        "name_producto": random.choice(nombres_productos),  # Nombre aleatorio
        "id_provedor": random.choice(proveedores)["id_provedor"],  # ID de proveedor aleatorio
        "price_united": price_united,
        "price_publico": round(price_united * 1.2, 2)  # Precio pÃºblico con un 20% de incremento
    }
# ðŸ“Œ Generar 10 nuevos productos y agregarlos a la lista existente
productos_generados.extend([generar_producto() for _ in range(40)])

# ðŸ“‚ Guardar los datos actualizados en el mismo archivo JSON
with open(nombre_archivo, mode="w") as file:
    json.dump(productos_generados, file, indent=4)  # Guardar con formato legible

print(f"âœ… Datos agregados y guardados en: {nombre_archivo}")
